{
    "project": {
        "name": "shadow-ui",
        "description": "Build “encapsulated” UI components mimicking web components (custom elements), such as dropdowns, popups, tooltips, etc.",
        "version": "0.6.1-0",
        "url": "http://amsul.github.io/shadow-ui"
    },
    "files": {
        "js/source/objects/DataElement.js": {
            "name": "js/source/objects/DataElement.js",
            "modules": {},
            "classes": {
                "shadow.DataElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/source/objects/Date.js": {
            "name": "js/source/objects/Date.js",
            "modules": {},
            "classes": {
                "shadow.Date": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/source/objects/Element.js": {
            "name": "js/source/objects/Element.js",
            "modules": {},
            "classes": {
                "shadow.Element": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/source/objects/Object.js": {
            "name": "js/source/objects/Object.js",
            "modules": {},
            "classes": {
                "shadow.Object": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js/source/build.js": {
            "name": "js/source/build.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/source/core.js": {
            "name": "js/source/core.js",
            "modules": {
                "shadow": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js/source/helpers.js": {
            "name": "js/source/helpers.js",
            "modules": {},
            "classes": {
                "shadow._": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "shadow": {
            "name": "shadow",
            "submodules": {},
            "classes": {
                "shadow.DataElement": 1,
                "shadow.Date": 1,
                "shadow.Element": 1,
                "shadow.Object": 1,
                "shadow._": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js/source/helpers.js",
            "line": 2
        }
    },
    "classes": {
        "shadow.DataElement": {
            "name": "shadow.DataElement",
            "shortname": "shadow.DataElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "shadow",
            "file": "js/source/objects/DataElement.js",
            "line": 2,
            "description": "Construct a shadow data element object.",
            "extends": "shadow.Element",
            "static": 1
        },
        "shadow.Date": {
            "name": "shadow.Date",
            "shortname": "shadow.Date",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "shadow",
            "file": "js/source/objects/Date.js",
            "line": 2,
            "description": "Construct a shadow date object.",
            "extends": "shadow.Object",
            "static": 1
        },
        "shadow.Element": {
            "name": "shadow.Element",
            "shortname": "shadow.Element",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "shadow",
            "file": "js/source/objects/Element.js",
            "line": 2,
            "description": "Construct a shadow element object.",
            "extends": "shadow.Object",
            "static": 1
        },
        "shadow.Object": {
            "name": "shadow.Object",
            "shortname": "shadow.Object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "shadow",
            "file": "js/source/objects/Object.js",
            "line": 2,
            "description": "The core shadow object prototype.",
            "static": 1
        },
        "shadow._": {
            "name": "shadow._",
            "shortname": "shadow._",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "shadow",
            "namespace": "",
            "file": "js/source/helpers.js",
            "line": 2,
            "description": "Utility methods to simplify and share common functionality.",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "js/source/objects/DataElement.js",
            "line": 32,
            "description": "Setup the data element’s attributes before everything gets sealed\nand before getters and setters are made.",
            "itemtype": "method",
            "name": "setup",
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/DataElement.js",
            "line": 104,
            "description": "Create an instance of a data element object.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "options",
                    "description": "Options for the data element’s prototype.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An instance of the shadow element.",
                "type": "shadow.DataElement"
            },
            "static": 1,
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/DataElement.js",
            "line": 183,
            "description": "Convert a value into a formatted string.",
            "itemtype": "method",
            "name": "format",
            "params": [
                {
                    "name": "value",
                    "description": "The value to format.",
                    "type": "String|Boolean|Number|Array|Hash"
                },
                {
                    "name": "options",
                    "description": "Options to customize the formatting.",
                    "type": "Hash"
                }
            ],
            "return": {
                "description": "The formatted string.",
                "type": "String"
            },
            "todo": [
                "Implement the `options` argument."
            ],
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/DataElement.js",
            "line": 246,
            "description": "Convert a formatted string into a parsed value.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "string",
                    "description": "The string value to parse.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The parsed formatting-value hash.",
                "type": "Hash"
            },
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/DataElement.js",
            "line": 309,
            "description": "Convert a formatted unit string into a parsed unit hash.",
            "itemtype": "method",
            "name": "parseUnit",
            "params": [
                {
                    "name": "stringUnit",
                    "description": "The string value’s unit to parse.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The parsed formatting-unit hash.",
                "type": "Hash"
            },
            "access": "private",
            "tagname": "",
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/DataElement.js",
            "line": 354,
            "description": "Get a data element’s attribute with certain options.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute to get.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options to customize the return value, such as with formatting.",
                    "type": "Hash"
                }
            ],
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/DataElement.js",
            "line": 378,
            "description": "Format multiple units of value.",
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/DataElement.js",
            "line": 417,
            "description": "Format a range’s units.",
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/DataElement.js",
            "line": 442,
            "description": "Convert a formatting string into a formatting array.",
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/DataElement.js",
            "line": 487,
            "description": "Parse multiple units of value.",
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/DataElement.js",
            "line": 548,
            "description": "Parse a range’s units.",
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/DataElement.js",
            "line": 595,
            "description": "Escape any regular expression special characters.",
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/DataElement.js",
            "line": 603,
            "description": "Slice a string up to a string marked as a starting point.",
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/DataElement.js",
            "line": 615,
            "description": "Slice a string up to a string marked as the ending point.",
            "class": "shadow.DataElement"
        },
        {
            "file": "js/source/objects/Date.js",
            "line": 14,
            "description": "The value of the date represented as an array.",
            "example": [
                "\n\n```javascript\nvar date = shadow.Date.create(new Date(2013, 3, 20))\ndate.value\n// returns [2013, 3, 20]\n```"
            ],
            "itemtype": "attribute",
            "name": "value",
            "type": "{Array}",
            "default": "null",
            "readonly": "",
            "class": "shadow.Date"
        },
        {
            "file": "js/source/objects/Date.js",
            "line": 33,
            "description": "The year of the shadow date object.",
            "itemtype": "attribute",
            "name": "year",
            "type": "{Number}",
            "default": "null",
            "readonly": "",
            "class": "shadow.Date"
        },
        {
            "file": "js/source/objects/Date.js",
            "line": 44,
            "description": "The month of the shadow date object.",
            "itemtype": "attribute",
            "name": "month",
            "type": "{Number}",
            "default": "null",
            "readonly": "",
            "class": "shadow.Date"
        },
        {
            "file": "js/source/objects/Date.js",
            "line": 55,
            "description": "The date of the shadow date object.",
            "itemtype": "attribute",
            "name": "date",
            "type": "{Number}",
            "default": "null",
            "readonly": "",
            "class": "shadow.Date"
        },
        {
            "file": "js/source/objects/Date.js",
            "line": 66,
            "description": "A flag to set the date to the first of the month upon creation.",
            "example": [
                "\n\n```javascript\nvar date = shadow.Date.create([2013, 3, 20], {\n    setToTheFirst: true\n})\ndate.value\n// returns [2013, 3, 1]\n```"
            ],
            "itemtype": "attribute",
            "name": "setToTheFirst",
            "type": "{Boolean}",
            "default": "false",
            "class": "shadow.Date"
        },
        {
            "file": "js/source/objects/Date.js",
            "line": 86,
            "description": "Create an instance of a shadow date.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "value",
                    "description": "The value of the date to create.",
                    "type": "Array|String|Number|Date|shadow.Date"
                },
                {
                    "name": "options",
                    "description": "Options for the date’s prototype.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An instance of the shadow date.",
                "type": "shadow.Date"
            },
            "static": 1,
            "class": "shadow.Date"
        },
        {
            "file": "js/source/objects/Date.js",
            "line": 128,
            "description": "Extend the shadow date.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "options",
                    "description": "Options to extend the date’s prototype.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An extension of the shadow date class.",
                "type": "shadow.Date"
            },
            "static": 1,
            "class": "shadow.Date"
        },
        {
            "file": "js/source/objects/Date.js",
            "line": 138,
            "description": "Compare the shadow date’s value with another date.",
            "itemtype": "method",
            "name": "compare",
            "params": [
                {
                    "name": "comparison",
                    "description": "A “scope” to compare within.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "date",
                    "description": "The value of the date to compare against.",
                    "type": "Array|String|Number|Date|shadow.Date"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "shadow.Date"
        },
        {
            "file": "js/source/objects/Date.js",
            "line": 204,
            "description": "Compare a date with a range in various ways.",
            "itemtype": "method",
            "name": "compareRange",
            "params": [
                {
                    "name": "comparison",
                    "description": "A “scope” to compare within.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "range",
                    "description": "The range to compare against.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "shadow.Date"
        },
        {
            "file": "js/source/objects/Date.js",
            "line": 244,
            "description": "Simplify comparison of dates.",
            "example": [
                "\n\n```javascript\nshadow.Date.create([2013, 3, 20]) > shadow.Date.create([2014, 8, 14])\n// returns false\n\nshadow.Date.create([2013, 3, 20]) < shadow.Date.create([2014, 8, 14])\n// returns true\n```"
            ],
            "itemtype": "method",
            "name": "valueOf",
            "return": {
                "description": "The time of the date to make comparisons easier.",
                "type": "Number"
            },
            "class": "shadow.Date"
        },
        {
            "file": "js/source/objects/Date.js",
            "line": 265,
            "description": "Simplify stringification of the shadow date.",
            "example": [
                "\n\n```javascript\nvar date = shadow.Date.create([2013, 3, 20])\nJSON.stringify(date)\n// returns \"[2013,3,20]\"\n```"
            ],
            "itemtype": "method",
            "name": "toJSON",
            "return": {
                "description": "The value of the date.",
                "type": "Array"
            },
            "class": "shadow.Date"
        },
        {
            "file": "js/source/objects/Date.js",
            "line": 286,
            "description": "Convert a date representation into a date.",
            "class": "shadow.Date"
        },
        {
            "file": "js/source/objects/Date.js",
            "line": 304,
            "description": "Get the decade a year belongs to.",
            "class": "shadow.Date"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 14,
            "description": "The source element to bind the shadow data to.",
            "itemtype": "attribute",
            "name": "$el",
            "type": "jQuery",
            "default": "null",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 24,
            "description": "The host element that contains the shadow element within.\n\nThis is usually the same as the `$el` - unless if it’s an element\nthat cannot contain elements, such as an `input`.",
            "itemtype": "attribute",
            "name": "$host",
            "type": "jQuery",
            "default": "null",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 41,
            "description": "A unique ID for the element; constructed when the element is created.",
            "itemtype": "attribute",
            "name": "id",
            "type": "String",
            "default": "null",
            "readonly": "",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 52,
            "description": "An hash mapping of an element’s attributes.\n\nThis object also gets populated with any `data-ui-*` attributes\non the source element.",
            "example": [
                "\n\n```html\n<div data-ui-prop=\"false\" data-ui-another-prop=\"[1,3,4]\"></div>\n```\n\nBecomes\n\n```javascript\nattrs: { prop: false, anotherProp: [1,3,4] }\n```"
            ],
            "itemtype": "attribute",
            "name": "attrs",
            "type": "Hash",
            "default": "null",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 77,
            "description": "An hash mapping of an element’s dictionary to be used in templating.",
            "itemtype": "attribute",
            "name": "dict",
            "type": "Hash",
            "default": "null",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 87,
            "description": "An hash mapping of an element’s class names to be used in templating.",
            "itemtype": "attribute",
            "name": "classNames",
            "type": "Hash",
            "default": "null",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 97,
            "description": "A prefix to use on all the class names of an element.",
            "example": [
                "\n\n```javascript\nclassNames: {\n    root: ' --root',\n    box: 'box',\n    button: 'button'\n},\nclassNamesPrefix: 'my-prefix'\n```\n\nBecomes\n\n```javascript\nclassNames: {\n    root: 'my-prefix my-prefix--root',\n    box: 'my-prefix__box',\n    button: 'my-prefix__button'\n}\n```"
            ],
            "itemtype": "attribute",
            "name": "classNamesPrefix",
            "type": "String",
            "default": "null",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 128,
            "description": "The contents to put within the shadow element during templating.\n\nThis default to using anything within the source element as the `content`.",
            "itemtype": "attribute",
            "name": "content",
            "type": "Node|DocumentFragment",
            "default": "null",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 140,
            "description": "Set up any listeners, configurations, attributes, etc. before\nthey all are sealed and frozen.",
            "itemtype": "attribute",
            "name": "setup",
            "type": "Function",
            "default": "null",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 151,
            "description": "Create a template for the shadow element.",
            "itemtype": "attribute",
            "name": "template",
            "type": "Function|String|Node|jQuery",
            "default": "null",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 161,
            "description": "Create an instance of a shadow element.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "options",
                    "description": "Options for the element’s prototype.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "$el",
                            "description": "The source element of the shadow element.",
                            "type": "HTMLElement|jQuery"
                        }
                    ]
                }
            ],
            "return": {
                "description": "An instance of the shadow element.",
                "type": "shadow.Element"
            },
            "static": 1,
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 257,
            "description": "After extending the shadow element class, build all the occurrences\nof the element in the DOM.",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "options",
                    "description": "Options to extend the element’s prototype.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An extension of the shadow element class.",
                "type": "shadow.Object"
            },
            "static": 1,
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 273,
            "description": "Bind events to fire during the element’s lifecycle.\n\nThis method is basically a wrapper for jQuery’s `$.fn.on` method\nand uses the source element (`$el`) as the target.\n\nCheck out the [documentation here](http://api.jquery.com/on/#on-events-selector-data).",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "events",
                    "description": "Unlike with jQuery, each event’s namespace is **required**.",
                    "type": "String|Object"
                },
                {
                    "name": "selector",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 297,
            "description": "Unbind events from firing during the element’s lifecycle.\n\nThis method is basically a wrapper for jQuery’s `$.fn.off` method\nand uses the source element (`$el`) as the target.\n\nCheck out the [documentation here](http://api.jquery.com/on/#on-events-selector-data).",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "events",
                    "description": "Unlike with jQuery, each event’s namespace is **required**.",
                    "type": "String|Object"
                },
                {
                    "name": "selector",
                    "description": "",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 320,
            "description": "Get the value of an attribute of the shadow element.",
            "example": [
                "\n\n```javascript\nvar element = shadow.Element.create({\n    //...\n    attrs: {\n        myAttr: true,\n        myOtherAttr: { niceness: 10 }\n    }\n})\n```\n\nWe can use the `get` method:\n\n```javascript\nelement.get('myAttr')\n// returns true\n\nelement.get('myOtherAttr')\n// returns { niceness: 10 }\n```\n\nOr, we can directly access the `attrs` object:\n\n```javascript\nelement.attrs.myAttr\n// returns true\n\nelement.attrs.myOtherAttr\n// returns { niceness: 10 }\n```"
            ],
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute to get.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value of the attribute.",
                "type": "String|Boolean|Number|Array|Hash"
            },
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 364,
            "description": "Set the value of an attribute of the shadow element.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute to set.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the attribute to set.",
                    "type": "String|Boolean|Number|Array|Hash"
                }
            ],
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 378,
            "description": "Add a unit to an attribute of the shadow element.\n\nThe attribute **must** be an array containing the same types of units.",
            "example": [
                "\n\n```js\nvar element = shadow.Element.create({\n    //...\n    attrs: {\n        myCollection: [{ value: 6 }, { value: 14 }, { value: 19 }]\n    }\n})\n```\n\nTo add a value, we’d do something like this:\n\n```js\nelement.get('myCollection')\n// returns [{ value: 6 }, { value: 14 }, { value: 19 }]\n\nelement.add('myCollection', { value: 24 }, function(unit, loopedUnit) {\n    return unit.value === loopedUnit.value\n})\n\nelement.get('myCollection')\n// returns [{ value: 6 }, { value: 14 }, { value: 19 }, { value: 24 }]\n```"
            ],
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute to add to.",
                    "type": "String"
                },
                {
                    "name": "unit",
                    "description": "The unit of the value to add.",
                    "type": "String|Boolean|Number|Array|Hash"
                },
                {
                    "name": "comparator",
                    "description": "A function to use to compare the units to avoid duplicates.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 430,
            "description": "Remove a unit from an attribute of the shadow element.\n\nThe attribute **must** be an array containing the same types of units.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the attribute to remove from.",
                    "type": "String"
                },
                {
                    "name": "unit",
                    "description": "The unit of the value to remove.",
                    "type": "String|Boolean|Number|Array|Hash"
                },
                {
                    "name": "comparator",
                    "description": "A function to use to find the unit to remove.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 460,
            "description": "Get the shadow ui attributes from an element.",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 482,
            "description": "Attach nodes relevant to the shadow element.",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 516,
            "description": "Build out the template contents.",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 533,
            "description": "Define the relationship between the element and the host.",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 546,
            "description": "Copy shadow ui attributes to the source element.",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 564,
            "description": "Decorate a shadow attribute with a getter and setter.",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 596,
            "description": "Update a shadow attribute on an element.",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Element.js",
            "line": 612,
            "description": "Prefix each class name in a hash of class names with a prefix.",
            "class": "shadow.Element"
        },
        {
            "file": "js/source/objects/Object.js",
            "line": 11,
            "description": "The name of the object.\n\nClasses are `PascalCased` and objects are `camelCased`.",
            "itemtype": "attribute",
            "name": "name",
            "type": "String",
            "readonly": "",
            "class": "shadow.Object"
        },
        {
            "file": "js/source/objects/Object.js",
            "line": 26,
            "description": "Create an instance of the shadow object.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "options",
                    "description": "Options to extend the object’s prototype.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An instance of the shadow object.",
                "type": "shadow.Object"
            },
            "static": 1,
            "class": "shadow.Object"
        },
        {
            "file": "js/source/objects/Object.js",
            "line": 65,
            "description": "Extend the object using prototypes. Based on:\nhttp://aaditmshah.github.io/why-prototypal-inheritance-matters/#inheriting_from_multiple_prototypes",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "options",
                    "description": "Options to extend the object’s prototype.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An extension of the shadow object class.",
                "type": "shadow.Object"
            },
            "static": 1,
            "class": "shadow.Object"
        },
        {
            "file": "js/source/objects/Object.js",
            "line": 122,
            "description": "Check if the object is a class.",
            "itemtype": "method",
            "name": "isClass",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "shadow.Object"
        },
        {
            "file": "js/source/objects/Object.js",
            "line": 138,
            "description": "Check if the object inherits from the class of another. Inspiration from:\nhttp://aaditmshah.github.io/why-prototypal-inheritance-matters/#fixing_the_instanceof_operator",
            "itemtype": "method",
            "name": "isClassOf",
            "params": [
                {
                    "name": "Instance",
                    "description": "The instance of a shadow object.",
                    "type": "shadow.Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "shadow.Object"
        },
        {
            "file": "js/source/objects/Object.js",
            "line": 161,
            "description": "Check if the object is an instance of another. Inspiration from:\nhttp://aaditmshah.github.io/why-prototypal-inheritance-matters/#fixing_the_instanceof_operator",
            "itemtype": "method",
            "name": "isInstanceOf",
            "params": [
                {
                    "name": "Base",
                    "description": "The class of a shadow object.",
                    "type": "shadow.Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "shadow.Object"
        },
        {
            "file": "js/source/objects/Object.js",
            "line": 177,
            "description": "Check if the object is the prototype of another.",
            "itemtype": "method",
            "name": "isPrototypeOf",
            "params": [
                {
                    "name": "object",
                    "description": "A shadow object.",
                    "type": "shadow.Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "shadow.Object"
        },
        {
            "file": "js/source/objects/Object.js",
            "line": 195,
            "description": "Cast the object into a string representation.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "A string representation of the shadow object.",
                "type": "String"
            },
            "class": "shadow.Object"
        },
        {
            "file": "js/source/objects/Object.js",
            "line": 216,
            "description": "Cast the object into a full string representation.",
            "itemtype": "method",
            "name": "toFullString",
            "return": {
                "description": "A full trace string representation of the shadow object.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "shadow.Object"
        },
        {
            "file": "js/source/build.js",
            "line": 2,
            "description": "Build a shadow element.",
            "class": "shadow._"
        },
        {
            "file": "js/source/build.js",
            "line": 21,
            "description": "Build all the named shadow elements.",
            "class": "shadow._"
        },
        {
            "file": "js/source/core.js",
            "line": 6,
            "description": "The main interface to register a shadow component.",
            "class": "shadow._",
            "module": "shadow"
        },
        {
            "file": "js/source/helpers.js",
            "line": 11,
            "description": "A no-op.",
            "itemtype": "method",
            "name": "noop",
            "static": 1,
            "class": "shadow._",
            "module": "shadow"
        },
        {
            "file": "js/source/helpers.js",
            "line": 20,
            "description": "Define an enumerable property on an object.",
            "itemtype": "method",
            "name": "define",
            "params": [
                {
                    "name": "object",
                    "description": "The object to receive the property definition.",
                    "type": "Object"
                },
                {
                    "name": "prop",
                    "description": "The property to define.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value of the definition.",
                    "type": "String|Boolean|Number|Array|Object|Function"
                }
            ],
            "static": 1,
            "class": "shadow._",
            "module": "shadow"
        },
        {
            "file": "js/source/helpers.js",
            "line": 37,
            "description": "Convert to camel-cased text.",
            "example": [
                "\n\n```javascript\nshadow._.caseCamel('howdy-there stranger')\n// returns 'howdyThere stranger'\n\nshadow._.caseCamel('HowdyThere-stranger')\n// returns 'howdyThereStranger'\n```"
            ],
            "itemtype": "method",
            "name": "caseCamel",
            "params": [
                {
                    "name": "words",
                    "description": "A string of words delimited by dashes, underscores, and case changes.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The camelized string of words.",
                "type": "String"
            },
            "static": 1,
            "class": "shadow._",
            "module": "shadow"
        },
        {
            "file": "js/source/helpers.js",
            "line": 76,
            "description": "Convert to pascal-cased text.\n\n```javascript\nshadow._.casePascal('howdy-there stranger')\n// returns 'HowdyThere stranger'\n\nshadow._.casePascal('HowdyThere-stranger')\n// returns 'HowdyThereStranger'\n```",
            "itemtype": "method",
            "name": "casePascal",
            "params": [
                {
                    "name": "words",
                    "description": "A string of words delimited by dashes, underscores, and case changes.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The pascalized string of words.",
                "type": "String"
            },
            "static": 1,
            "class": "shadow._",
            "module": "shadow"
        },
        {
            "file": "js/source/helpers.js",
            "line": 112,
            "description": "Convert to dash-cased text.\n\n```javascript\nshadow._.caseDash('howdy-there stranger')\n// returns 'howdy-there stranger'\n\nshadow._.caseDash('HowdyThere-stranger')\n// returns 'howdy-there-stranger'\n```",
            "itemtype": "method",
            "name": "caseDash",
            "params": [
                {
                    "name": "words",
                    "description": "A string of words delimited by dashes, underscores, and case changes.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The dasherized string of words.",
                "type": "String"
            },
            "static": 1,
            "class": "shadow._",
            "module": "shadow"
        },
        {
            "file": "js/source/helpers.js",
            "line": 148,
            "description": "Check what the internal type of a value is.",
            "example": [
                "\n\n```javascript\nshadow._.isTypeOf(new Date)\n// returns 'date'\n\nshadow._.isTypeof(new Date, 'date')\n// returns true\n```"
            ],
            "itemtype": "method",
            "name": "isTypeOf",
            "params": [
                {
                    "name": "value",
                    "description": "The value whose type is being checked."
                },
                {
                    "name": "type",
                    "description": "A type to compare against.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "If a `type` is passed, a boolean is returned. Otherwise the type is returned.",
                "type": "String|Boolean"
            },
            "static": 1,
            "class": "shadow._",
            "module": "shadow"
        },
        {
            "file": "js/source/helpers.js",
            "line": 175,
            "description": "Define aria attributes on an element.",
            "example": [
                "\n\nGiven the following element:\n\n```html\n<div id=\"elem\"></div>\n```\n\nAnd applying the following snippet:\n\n```javascript\nvar el = document.getElementById('elem')\nshadow._.aria(el, 'role', 'button')\nshadow._.aria(el, 'controls', 'widget')\n```\n\nThe element becomes:\n\n```html\n<div id=\"elem\" role=\"button\" aria-controls=\"widget\"></div>\n```"
            ],
            "itemtype": "method",
            "name": "aria",
            "params": [
                {
                    "name": "element",
                    "description": "The HTML element whose attribute should be set.",
                    "type": "HTMLElement"
                },
                {
                    "name": "attribute",
                    "description": "The name of the aria attribute to set (minus the `aria-` part of the name).",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to set the attribute to.",
                    "type": "String|Boolean"
                }
            ],
            "static": 1,
            "class": "shadow._",
            "module": "shadow"
        },
        {
            "file": "js/source/helpers.js",
            "line": 206,
            "description": "An alternate way to set multiple aria attributes on an element.",
            "example": [
                "\n\nGiven the following element:\n\n```html\n<div id=\"elem\"></div>\n```\n\nAnd applying the following snippet:\n\n```javascript\nvar el = document.getElementById('elem')\nshadow._.aria(el, {\n    role: 'button',\n    controls: 'widget'\n})\n```\n\nThe element becomes:\n\n```html\n<div id=\"elem\" role=\"button\" aria-controls=\"widget\"></div>\n```"
            ],
            "itemtype": "method",
            "name": "aria",
            "params": [
                {
                    "name": "element",
                    "description": "The HTML element whose attribute should be set.",
                    "type": "HTMLElement"
                },
                {
                    "name": "attributes",
                    "description": "A hash mapping of attribute names (minus the `aria-` part) to values.",
                    "type": "Hash"
                }
            ],
            "static": 1,
            "class": "shadow._",
            "module": "shadow"
        },
        {
            "file": "js/source/helpers.js",
            "line": 250,
            "description": "Create an element node with optional children.",
            "itemtype": "method",
            "name": "el",
            "params": [
                {
                    "name": "options",
                    "description": "Options to customize the creation. If it’s a string, the value is used as the class name.",
                    "type": "String|Hash",
                    "optional": true,
                    "props": [
                        {
                            "name": "name",
                            "description": "The tag name for the element.",
                            "type": "String"
                        },
                        {
                            "name": "klass",
                            "description": "The class name for the element.",
                            "type": "String"
                        },
                        {
                            "name": "attrs",
                            "description": "A hash mapping of attributes for the element.",
                            "type": "Hash"
                        }
                    ]
                },
                {
                    "name": "childEls",
                    "description": "The children to append to the element.",
                    "type": "Node|HTMLElement|DocumentFragment|Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The newly created element.",
                "type": "HTMLElement"
            },
            "static": 1,
            "class": "shadow._",
            "module": "shadow"
        },
        {
            "file": "js/source/helpers.js",
            "line": 307,
            "description": "Get the index of a unit within a collection.",
            "itemtype": "method",
            "name": "indexIn",
            "params": [
                {
                    "name": "collection",
                    "description": "A collection of values with the same type.",
                    "type": "Array"
                },
                {
                    "name": "unit",
                    "description": "The unit to find.",
                    "type": "String|Boolean|Number|Array|Object"
                },
                {
                    "name": "comparator",
                    "description": "A function to use for the comparison of units.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The index the unit was found at. `-1` if it wasn’t found.",
                "type": "Number"
            },
            "static": 1,
            "class": "shadow._",
            "module": "shadow"
        },
        {
            "file": "js/source/helpers.js",
            "line": 332,
            "description": "Check if a unit is within a collection.",
            "itemtype": "method",
            "name": "isWithin",
            "params": [
                {
                    "name": "collection",
                    "description": "A collection of values with the same type.",
                    "type": "Array"
                },
                {
                    "name": "unit",
                    "description": "The unit to find.",
                    "type": "String|Boolean|Number|Array|Object"
                },
                {
                    "name": "comparator",
                    "description": "A function to use for the comparison of units.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "static": 1,
            "class": "shadow._",
            "module": "shadow"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nFormat multiple units of value.",
            "line": " js/source/objects/DataElement.js:378"
        },
        {
            "message": "Missing item type\nFormat a range’s units.",
            "line": " js/source/objects/DataElement.js:417"
        },
        {
            "message": "Missing item type\nConvert a formatting string into a formatting array.",
            "line": " js/source/objects/DataElement.js:442"
        },
        {
            "message": "Missing item type\nParse multiple units of value.",
            "line": " js/source/objects/DataElement.js:487"
        },
        {
            "message": "Missing item type\nParse a range’s units.",
            "line": " js/source/objects/DataElement.js:548"
        },
        {
            "message": "Missing item type\nEscape any regular expression special characters.",
            "line": " js/source/objects/DataElement.js:595"
        },
        {
            "message": "Missing item type\nSlice a string up to a string marked as a starting point.",
            "line": " js/source/objects/DataElement.js:603"
        },
        {
            "message": "Missing item type\nSlice a string up to a string marked as the ending point.",
            "line": " js/source/objects/DataElement.js:615"
        },
        {
            "message": "Missing item type\nConvert a date representation into a date.",
            "line": " js/source/objects/Date.js:286"
        },
        {
            "message": "Missing item type\nGet the decade a year belongs to.",
            "line": " js/source/objects/Date.js:304"
        },
        {
            "message": "Missing item type\nGet the shadow ui attributes from an element.",
            "line": " js/source/objects/Element.js:460"
        },
        {
            "message": "Missing item type\nAttach nodes relevant to the shadow element.",
            "line": " js/source/objects/Element.js:482"
        },
        {
            "message": "Missing item type\nBuild out the template contents.",
            "line": " js/source/objects/Element.js:516"
        },
        {
            "message": "Missing item type\nDefine the relationship between the element and the host.",
            "line": " js/source/objects/Element.js:533"
        },
        {
            "message": "Missing item type\nCopy shadow ui attributes to the source element.",
            "line": " js/source/objects/Element.js:546"
        },
        {
            "message": "Missing item type\nDecorate a shadow attribute with a getter and setter.",
            "line": " js/source/objects/Element.js:564"
        },
        {
            "message": "Missing item type\nUpdate a shadow attribute on an element.",
            "line": " js/source/objects/Element.js:596"
        },
        {
            "message": "Missing item type\nPrefix each class name in a hash of class names with a prefix.",
            "line": " js/source/objects/Element.js:612"
        },
        {
            "message": "Missing item type\nBuild a shadow element.",
            "line": " js/source/build.js:2"
        },
        {
            "message": "Missing item type\nBuild all the named shadow elements.",
            "line": " js/source/build.js:21"
        },
        {
            "message": "Missing item type\nThe main interface to register a shadow component.",
            "line": " js/source/core.js:6"
        }
    ]
}